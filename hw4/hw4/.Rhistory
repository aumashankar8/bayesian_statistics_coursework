library(dplyr)
library(lme4)
library(tidyr)
##--------------------------------------------
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
select(alzhData, CardId, Date, Viewing)
View(select(alzhData, CardId, Date, Viewing))
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData1 <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`))
alzhData1
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Accuracy, `Time(ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData
View(alzhData)
names(alzhData)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <- distinct(alzhData, CardId, Date, .keep_all = TRUE)
View(alzhDataDistinct)
## First viewing of the card per day
alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE)
## First viewing of the card per day
View(alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
View(alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
## First viewing of the card per day
View(alzhData %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE))
View(alzhDataDistinct)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE)
View(alzhDataDistinct)
View(alzhDataDistinct)
View(Asian)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE)
View(alzhDataDistinct)
distinct(alzhDataDistinct$UserId)
distinct(alzhDataDistinct, UserId)
unique(alzhDataDistinct$UserId)
users <- unique(alzhDataDistinct$UserId)
alzhDataDistinct[which(alzhDataDistinct$UserId == users), ]
alzhDataDistinct[which(alzhDataDistinct$UserId == users[1]), ]
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[1]), ])
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[3]), ])
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[1] & alzhDataDistinct$UserId == 2022-03-03), ])
version
beta.post.mat_e
###   Libraries
library(rjags)
library(vioplot)
setwd("~/UT Austin/Spring 2023/Bayesian Stats/hw4/hw4")
mosquito=read.table("mosquitofish.txt",header=TRUE) # read in mosquitofish data
head(mosquito)
n  = 32 # those groups of fish that were only counted twice
y  = mosquito$N1[1:n]
N  = mosquito$N0[1:n]
l1 = mosquito$L1[1:n]
d  = mosquito$d[1:n]
l1_stand = scale(l1)[,1] #standardized L1 - mean length of surviving fish
d_stand = scale(d)[,1] #standardized Days of study
l1_d_product = l1_stand * d_stand
# Covariates - Intercept, stand l1, stand d, product of l1 and d
p = 4
X = matrix(1,n,p)
X[,2] = l1_stand
X[,3] = d_stand
X[,4] = l1_d_product
mosquito_jags <-"
model{
for(i in 1:n){
y[i] ~ dbin(theta[i],N[i])
probit(theta[i]) = b0 + b1*X[i,2] + b2*X[i,3] + b3*(X[i,2]*X[i,3])
}
b0 ~ dnorm(mu,tau)
b1 ~ dnorm(mu,tau)
b2 ~ dnorm(mu,tau)
b3 ~ dnorm(mu,tau)
}
"
mod <- textConnection(mosquito_jags)
mu=0
tau=1/2.25 #Precision. 1 / sigma^2
m.out<-jags.model(mod,data=list('y'=y,'n'=n, 'N'=N, 'X'=X,'mu'=mu,'tau'=tau),n.chains=1,n.adapt=0) # build model and algorithm
n.mcmc=10000
n.burn=round(.2*n.mcmc)
update(m.out,n.burn) # perform burn-in
m.samples=jags.samples(m.out,c('b0','b1','b2','b3'),n.mcmc) # fit model post-burn-in
#Trace Plot for (a)
beta.post.mat=cbind(m.samples$b0[1,,1],m.samples$b1[1,,1],m.samples$b2[1,,1],m.samples$b3[1,,1])
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
#Violin plot for (a)
vioplot(data.frame(beta.post.mat),names=expression(beta[0],beta[1],beta[2],beta[3]))
abline(h=0,col=8)
apply(beta.post.mat,2,mean) # marginal posterior means for beta
apply(beta.post.mat,2,sd) # marginal posterior sd for beta
apply(beta.post.mat,2,quantile,c(0.025,.975)) # marginal posterior 95% CI for beta
mosquito_jags_b <-"
model{
for(i in 1:n){
y[i] ~ dbin(theta[i],N[i])
probit(theta[i]) = b0 + b1*X[i,2] + b2*X[i,3]
}
b0 ~ dnorm(mu,tau)
b1 ~ dnorm(mu,tau)
b2 ~ dnorm(mu,tau)
}
"
mod_b <- textConnection(mosquito_jags_b)
mu=0
tau=1/2.25 #Precision. 1 / sigma^2
m.out_b<-jags.model(mod_b,data=list('y'=y,'n'=n, 'N'=N, 'X'=X,'mu'=mu,'tau'=tau),n.chains=1,n.adapt=0) # build model and algorithm
n.mcmc=10000
n.burn=round(.2*n.mcmc)
update(m.out_b,n.burn) # perform burn-in
m.samples_b=jags.samples(m.out_b,c('b0','b1','b2'),n.mcmc) # fit model post-burn-in
#Trace Plot for (b)
beta.post.mat_b=cbind(m.samples_b$b0[1,,1],m.samples_b$b1[1,,1],m.samples_b$b2[1,,1])
matplot(beta.post.mat_b,type="l",lty=1,ylab=bquote(beta))
#Violin plot for (b)
vioplot(data.frame(beta.post.mat_b),names=expression(beta[0],beta[1],beta[2]))
abline(h=0,col=8)
apply(beta.post.mat_b,2,mean) # marginal posterior means for beta
apply(beta.post.mat_b,2,sd) # marginal posterior sd for beta
apply(beta.post.mat_b,2,quantile,c(0.025,.975)) # marginal posterior 95% CI for beta
mosquito_jags_c <-"
model{
for(i in 1:n){
y[i] ~ dbin(theta[i],N[i])
probit(theta[i]) = b0 + b1*X[i,2]
}
b0 ~ dnorm(mu,tau)
b1 ~ dnorm(mu,tau)
}
"
mod_c <- textConnection(mosquito_jags_c)
mu=0
tau=1/2.25 #Precision. 1 / sigma^2
m.out_c<-jags.model(mod_c,data=list('y'=y,'n'=n, 'N'=N, 'X'=X,'mu'=mu,'tau'=tau),n.chains=1,n.adapt=0) # build model and algorithm
n.mcmc=10000
n.burn=round(.2*n.mcmc)
update(m.out_c,n.burn) # perform burn-in
m.samples_c=jags.samples(m.out_c,c('b0','b1'),n.mcmc) # fit model post-burn-in
#Trace Plot for (c)
beta.post.mat_c=cbind(m.samples_c$b0[1,,1],m.samples_c$b1[1,,1],m.samples_c$b2[1,,1])
matplot(beta.post.mat_c,type="l",lty=1,ylab=bquote(beta))
#Violin plot for (c)
vioplot(data.frame(beta.post.mat_c),names=expression(beta[0],beta[1]))
abline(h=0,col=8)
apply(beta.post.mat_c,2,mean) # marginal posterior means for beta
apply(beta.post.mat_c,2,sd) # marginal posterior sd for beta
apply(beta.post.mat_c,2,quantile,c(0.025,.975)) # marginal posterior 95% CI for beta
mosquito_jags_d <-"
model{
for(i in 1:n){
y[i] ~ dbin(theta[i],N[i])
probit(theta[i]) = b0 + b1*X[i,3]
}
b0 ~ dnorm(mu,tau)
b1 ~ dnorm(mu,tau)
}
"
mod_d <- textConnection(mosquito_jags_d)
mu=0
tau=1/2.25 #Precision. 1 / sigma^2
m.out_d<-jags.model(mod_d,data=list('y'=y,'n'=n, 'N'=N, 'X'=X,'mu'=mu,'tau'=tau),n.chains=1,n.adapt=0) # build model and algorithm
n.mcmc=10000
n.burn=round(.2*n.mcmc)
update(m.out_d,n.burn) # perform burn-in
m.samples_d=jags.samples(m.out_d,c('b0','b1'),n.mcmc) # fit model post-burn-in
#Trace Plot for (d)
beta.post.mat_d=cbind(m.samples_d$b0[1,,1],m.samples_d$b1[1,,1])
matplot(beta.post.mat_d,type="l",lty=1,ylab=bquote(beta))
#Violin plot for (d)
vioplot(data.frame(beta.post.mat_d),names=expression(beta[0],beta[1]))
abline(h=0,col=8)
apply(beta.post.mat_d,2,mean) # marginal posterior means for beta
apply(beta.post.mat_d,2,sd) # marginal posterior sd for beta
apply(beta.post.mat_d,2,quantile,c(0.025,.975)) # marginal posterior 95% CI for beta
mosquito_jags_e <-"
model{
for(i in 1:n){
y[i] ~ dbin(theta[i],N[i])
probit(theta[i]) = b0
}
b0 ~ dnorm(mu,tau)
}
"
mod_e <- textConnection(mosquito_jags_e)
mu=0
tau=1/2.25 #Precision. 1 / sigma^2
m.out_e<-jags.model(mod_e,data=list('y'=y,'n'=n, 'N'=N, 'X'=X,'mu'=mu,'tau'=tau),n.chains=1,n.adapt=0) # build model and algorithm
n.mcmc=10000
n.burn=round(.2*n.mcmc)
update(m.out_e,n.burn) # perform burn-in
m.samples_e=jags.samples(m.out_e,c('b0'),n.mcmc) # fit model post-burn-in
#Trace Plot for (e)
beta.post.mat_e=cbind(m.samples_e$b0[1,,1])
matplot(beta.post.mat_e,type="l",lty=1,ylab=bquote(beta))
#Violin plot for (e)
vioplot(data.frame(beta.post.mat_e),names=expression(beta[0]))
abline(h=0,col=8)
apply(beta.post.mat_e,2,mean) # marginal posterior means for beta
apply(beta.post.mat_e,2,sd) # marginal posterior sd for beta
apply(beta.post.mat_e,2,quantile,c(0.025,.975)) # marginal posterior 95% CI for beta
## All Trace Plots
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))   #(a)
matplot(beta.post.mat_b,type="l",lty=1,ylab=bquote(beta)) #(b)
matplot(beta.post.mat_c,type="l",lty=1,ylab=bquote(beta)) #(c)
matplot(beta.post.mat_d,type="l",lty=1,ylab=bquote(beta)) #(d)
matplot(beta.post.mat_e,type="l",lty=1,ylab=bquote(beta)) #(e)
## All Trace Plots
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))   #(a)
matplot(beta.post.mat_b,type="l",lty=1,ylab=bquote(beta)) #(b)
matplot(beta.post.mat_c,type="l",lty=1,ylab=bquote(beta)) #(c)
matplot(beta.post.mat_d,type="l",lty=1,ylab=bquote(beta)) #(d)
matplot(beta.post.mat_e,type="l",lty=1,ylab=bquote(beta)) #(e)
vioplot(data.frame(beta.post.mat),names=expression(beta[0],beta[1],beta[2],beta[3]))  #(a)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_b),names=expression(beta[0],beta[1],beta[2]))        #(b)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_c),names=expression(beta[0],beta[1]))                #(c)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_d),names=expression(beta[0],beta[1]))                #(d)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_e),names=expression(beta[0]))                        #(e)
abline(h=0,col=8)
## All Quantiles
apply(beta.post.mat,2,quantile,c(0.025,.975))   #(a)
apply(beta.post.mat_b,2,quantile,c(0.025,.975)) #(b)
apply(beta.post.mat_c,2,quantile,c(0.025,.975)) #(c)
apply(beta.post.mat_d,2,quantile,c(0.025,.975)) #(d)
apply(beta.post.mat_e,2,quantile,c(0.025,.975)) #(e)
X
beta.post.mat
X*beta.post.mat
postbeta = apply(beta.post.mat, 1, mean)
posttheta = pnorm(X%*%postbeta)
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat, 1, mean)
postbeta
X%*%postbeta
X
postbeta
beta.post.mat
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat[1], 1, mean)
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat[1,], 1, mean)
beta.post.mat[1,]
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat[ , 1], 1, mean)
beta.post.mat[ , 1]
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(m.samples$b0, 1, mean)
posttheta = pnorm(X%*%postbeta)
postbeta
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat, 1, mean)
posttheta = pnorm(X%*%postbeta)
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(m.samples_e$b0, 1, mean)
posttheta = pnorm(X%*%postbeta)
posttheta = pnorm(X[,1]%*%postbeta)
X[,1
]
posttheta = pnorm(t(X[,1])%*%postbeta)
postbeta
t(X[,1])
posttheta = pnorm(X[,1]*postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat_e, 1, mean)
beta.post.mat_e
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat_e, 1, mean)
posttheta = pnorm(X[,1]*postbeta)
postbeta
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(m.samples_e, 1, mean)
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(m.samples_e$b0, 1, mean)
postbeta
m.samples_e$b0
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat_e, 1, mean)
postbeta
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = mean(apply(beta.post.mat_e, 1, mean))
posttheta = pnorm(X[,1]*postbeta)
postbeta
m.samples_d$b0[1,,1]
matplot(beta.post.mat_d,type="l",lty=1,ylab=bquote(beta))
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = mean(apply(beta.post.mat, 1, mean))
posttheta = pnorm(X%*%postbeta)
posttheta = pnorm(X*postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
beta.post.mat
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = mean(apply(beta.post.mat, 1, mean))
postbeta
X
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat, 1, mean))
postbeta
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat, 1, mean)
postbeta
# a. DIC = 77.4476273975647
# b. DIC = 95.8812088467123
# c. DIC = 134.916023959013
# d. DIC = 134.943920193415
# e. DIC = 138.829639810027
postbeta = apply(beta.post.mat, 2, mean)
postbeta
posttheta = pnorm(X%*%postbeta)
posttheta
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
#(b)
postbeta = apply(beta.post.mat_b, 2, mean)
posttheta = pnorm(X%*%postbeta)
postbeta
X[-4,]
X
X[,-4]
postbeta = apply(beta.post.mat_b, 2, mean)
posttheta = pnorm(X[,-4]%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
postbeta = apply(beta.post.mat, 2, mean)
posttheta = pnorm(X%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
postbeta = apply(beta.post.mat_b, 2, mean)
posttheta = pnorm(X[,-4]%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
X[,-3:4]
X[,1:2]
X[,c(1,3)]
#(c)
postbeta = apply(beta.post.mat_c, 2, mean)
posttheta = pnorm(X[,1:2]%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
postbeta = apply(beta.post.mat_d, 2, mean)
posttheta = pnorm(X[,c(1,3)]%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
# "DIC = 136.613174557372"
postbeta = apply(beta.post.mat_d, 2, mean)
posttheta = pnorm(X[,c(1,3)]%*%postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
#(e)
postbeta = apply(beta.post.mat_e, 2, mean)
posttheta = pnorm(X[,1]%*%postbeta)
postbeta
X[,1]
X[,c(1,3)]
postbeta
posttheta = pnorm(X[,1]*postbeta)
Dhat = mean(-2*sum(log(dbinom(y,N,posttheta))))
pD = 2 * sum(log(mean(exp(beta.post.mat), 2)))
DIC=Dhat+2*pD
print(paste("DIC =",DIC))
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))   #(a)
matplot(beta.post.mat_b,type="l",lty=1,ylab=bquote(beta)) #(b)
matplot(beta.post.mat_c,type="l",lty=1,ylab=bquote(beta)) #(c)
matplot(beta.post.mat_d,type="l",lty=1,ylab=bquote(beta)) #(d)
matplot(beta.post.mat_e,type="l",lty=1,ylab=bquote(beta)) #(e)
vioplot(data.frame(beta.post.mat),names=expression(beta[0],beta[1],beta[2],beta[3]))  #(a)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_b),names=expression(beta[0],beta[1],beta[2]))        #(b)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_c),names=expression(beta[0],beta[1]))                #(c)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_d),names=expression(beta[0],beta[1]))                #(d)
abline(h=0,col=8)
vioplot(data.frame(beta.post.mat_e),names=expression(beta[0]))                        #(e)
abline(h=0,col=8)
