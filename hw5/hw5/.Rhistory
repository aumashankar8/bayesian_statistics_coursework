bestDescription = `28202140: Which of the following best describes the way you tend to take notes?`,
useNotes = `28202143: How do you use your notes? Check all that apply.`,
extraDetail = `28202144: If you feel like the last couple of questions did not fully capture (a) how you tend to take notes, and (b) how you use your notes, please provide more detail in the space below.`)
#Convert awkward N/A's to true NA
aldSurveySubset[aldSurveySubset == "n/a"] <- NA
aldSurveySubset[aldSurveySubset == "N/A"] <- NA
aldSurveySubset[aldSurveySubset == "N/a"] <- NA
#Recode the Categorical Entries?
table(aldSurveySubset$noteTakingStrat)
table(aldSurveySubset$bestDescription)
table(aldSurveySubset$useNotes) #Qualitiative
table(aldSurveySubset$extraDetail) #Qualitative
a <- aldSurveySubset %>% group_by(noteTakingStrat) %>%
summarise(cnt = n()) %>%
mutate(freq = cnt / sum(cnt)) %>%
rename(Strategy = noteTakingStrat)
b <- aldSurveySubset %>% group_by(bestDescription) %>%
summarise(cnt = n()) %>%
mutate(freq = cnt / sum(cnt)) %>%
rename(Strategy = bestDescription)
aldDescriptives <-rbind(a,b)
aldDescriptives <-rbind(a,b)
aldDescriptives
aldDescriptives
a
knitr::opts_chunk$set(echo = TRUE)
aldDescriptives
aldDescriptives
install.packages(LKT)
install.packages("LKT")
library(LKT)
library(readxl)
library(ggplot2)
library(readr)
library(stringr)
library(dplyr)
library(lme4)
library(tidyr)
##--------------------------------------------
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
select(alzhData, CardId, Date, Viewing)
View(select(alzhData, CardId, Date, Viewing))
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData1 <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`))
alzhData1
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Accuracy, `Time(ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData
View(alzhData)
names(alzhData)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
names(alzhData)
## Filter the data. Only Relevant Columns
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <- distinct(alzhData, CardId, Date, .keep_all = TRUE)
View(alzhDataDistinct)
## First viewing of the card per day
alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE)
## First viewing of the card per day
View(alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
View(alzhDataDistinct %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
## First viewing of the card per day
View(alzhData %>% group_by(Date) %>% distinct(CardId, .keep_all = TRUE))
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE))
View(alzhDataDistinct)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE)
View(alzhDataDistinct)
View(alzhDataDistinct)
View(Asian)
##--------------------------------------------
############# Read the Data ###################
alzhData <- read_excel("Blank Slate/Alzheimers Data/AlzheimersLearningCurve_FINAL_deidentified.xlsx")
View(alzhData)
## Filter the data. Only Relevant Columns and Split Date into Date and Time
alzhData <- subset(alzhData, select = c(UserId, `Group (0=YA, 1=HC, 2=AD)`, CardId, Date, Outcome, Accuracy, `Time (ms)`, Viewing, `Time difference between scheduled and actual viewing (m)`))
alzhData[c("Date","Hour_Minute")] <- str_split_fixed(alzhData$Date, ' ', 2)
alzhData <- alzhData %>% relocate("Hour_Minute", .after = "Date")
View(alzhData)
## First viewing of the card per day
alzhDataDistinct <-  distinct(alzhData, Date, CardId, .keep_all = TRUE)
View(alzhDataDistinct)
distinct(alzhDataDistinct$UserId)
distinct(alzhDataDistinct, UserId)
unique(alzhDataDistinct$UserId)
users <- unique(alzhDataDistinct$UserId)
alzhDataDistinct[which(alzhDataDistinct$UserId == users), ]
alzhDataDistinct[which(alzhDataDistinct$UserId == users[1]), ]
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[1]), ])
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[3]), ])
View(alzhDataDistinct[which(alzhDataDistinct$UserId == users[1] & alzhDataDistinct$UserId == 2022-03-03), ])
version
###   Libraries
library(rjags)
library(vioplot)
library(readr)
library(mvnfast)
setwd("~/UT Austin/Spring 2023/Bayesian Stats/hw5/hw5") #Set WD
oxboys <- read_csv("oxboys.csv")
n <- max(oxboys$Subject)
J <- sum(oxboys$Subject==1)
#Setup Data
y <- matrix(1,n,J)
for (i in 1:n){
y[i,] <- oxboys[which(oxboys$Subject==i),]$height
}
X <- matrix(1,n,J)
for (i in 1:n){
X[i,] <- oxboys[which(oxboys$Subject == i),]$age
}
X <- cbind(1,t(X))
library(rjags)
library(coda)
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X[,c(1,i+1)]%*%beta,tau*I.matrix)
}
invtau ~ dgamma(a,b)
tau = 1/invtau
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
invtau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- 1/invtau0
invtau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- 1/invtau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
n.mcmc=100000
n.burn=round(.2*n.mcmc)
#Set Priors
mu_u=rep(0,2)
I.matrix = diag(J)
taubeta.matrix = matrix(0,2,2)
tau_u=1/1000*diag(2) #Precision. 1 / sigma^2
a  = 1
b  = 3
a0 = 1
b0 = 3
a1 = 1
b1 = 3
m.out<-jags.model(mod,data=list('y'=y, 'X'=X, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=1,n.adapt=0)
update(m.out,n.burn) # perform burn-in
m.samples=jags.samples(m.out,c('beta','mu.beta','taubeta.matrix[1,1]','taubeta.matrix[2,2]'),n.mcmc) # fit model post-burn-in
library(mvnfast)
library(forcats)
install.packages("forcats")
install.packages("forcats")
library(mvnfast)
library(forcats)
library(ggridges)
library(ggplot2)
library(coda)
dist.labels=as.factor(rep(as.character(1:(n-1)),each=n.mcmc))
dist.labels
rep(as.character(1:(n-1))
)
dist.labels=as.factor(rep(as.character(1:n,each=n.mcmc))
dist.labels=as.factor(rep(as.character(1:n,each=n.mcmc)))
dist.labels=as.factor(rep(as.character(1:n,each=n.mcmc)))
dist.labels
m.samples$beta[1,,1][,2:n]
m.samples$beta[1,,1]
dist.labels=as.factor(rep(as.character(1:n,each=n.mcmc)))
slopes.mat=as.matrix(m.samples$beta[2,,1])
slopes.df=data.frame(x=c(slopes.mat),y=dist.labels)
m.samples$beta
m.samples$beta[1,,1]
m.samples$beta[1,,]
m.samples$beta[,,]
m.samples$beta[2,,2]
m.samples$beta[2,,1]
m.samples[[1]]
m.samples[[1]][,2]
m.samples[[1]][1,,1]
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X[,c(1,i+1)]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
n.mcmc=100000
n.burn=round(.2*n.mcmc)
#Set Priors
mu_u=rep(0,2)
I.matrix = diag(J)
taubeta.matrix = matrix(0,2,2)
tau_u=1/1000*diag(2) #Precision. 1 / sigma^2
a  = 1
b  = 3
a0 = 1
b0 = 3
a1 = 1
b1 = 3
m.out<-jags.model(mod,data=list('y'=y, 'X'=X, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=1,n.adapt=0)
update(m.out,n.burn) # perform burn-in
m.samples=jags.samples(m.out,c('beta','mu.beta','taubeta.matrix[1,1]','taubeta.matrix[2,2]'),n.mcmc) # fit model post-burn-in
#Trace Plot for Betas and Sigma
beta.post.mat=cbind(m.samples$beta[1,,1],m.samples$beta[2,,1],m.samples$mu.beta[1,,1])
sig.post.mat=cbind(m.samples$`taubeta.matrix[1,1]`[1,,1],m.samples$`taubeta.matrix[2,2]`[1,,1]) #Need to do 1/taubetamatrix
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
matplot(sig.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
m.samples[[1]][,2:n]
m.samples[[1]]
m.samples[[1]][,1]
m.samples[[1]][1,,1]
slopes.mat=as.matrix(m.samples[[1]][1,,1], m.samples[[1]][2,,1])
slopes.mat
slopes.mat=as.matrix(cbind(m.samples[[1]][1,,1], m.samples[[1]][2,,1]))
slopes.mat
slopes.df=data.frame(x=c(slopes.mat),y=dist.labels)
dist.labels=as.factor(rep(as.character(1:n),each=n.mcmc))
dist.labels
dist.labels=as.factor(rep(as.character(1:n),each=n.mcmc))
slopes.mat=as.matrix(cbind(m.samples[[1]][1,,1], m.samples[[1]][2,,1]))
slopes.df=data.frame(x=c(slopes.mat),y=dist.labels)
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(2:p,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(2:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(1:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
mu.beta.post.mat=m.samples$mu.beta[1,,1]
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
matplot(sig.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
#Trace Plot for Betas and Sigma
beta.post.mat=cbind(m.samples$beta[1,,1],m.samples$beta[2,,1])
mu.beta.post.mat=m.samples$mu.beta[1,,1]
sig.post.mat=cbind(m.samples$`taubeta.matrix[1,1]`[1,,1],m.samples$`taubeta.matrix[2,2]`[1,,1]) #Need to do 1/taubetamatrix
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
matplot(sig.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(beta))
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(mu))
dist.labels=as.factor(rep(as.character(1:n),each=n.mcmc))
slopes.mat=as.matrix(m.samples[[1]][2,,1])
slopes.df=data.frame(x=c(slopes.mat),y=dist.labels)
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(1:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
m.out<-jags.model(mod,data=list('y'=y, 'X'=X, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X[,c(1,i+1)]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
n.mcmc=100000
n.burn=round(.2*n.mcmc)
#Set Priors
mu_u=rep(0,2)
I.matrix = diag(J)
taubeta.matrix = matrix(0,2,2)
tau_u=1/1000*diag(2) #Precision. 1 / sigma^2
a  = 1
b  = 3
a0 = 1
b0 = 3
a1 = 1
b1 = 3
m.out<-jags.model(mod,data=list('y'=y, 'X'=X, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
update(m.out,n.burn) # perform burn-in
m.samples=jags.samples(m.out,c('beta','mu.beta','taubeta.matrix[1,1]','taubeta.matrix[2,2]'),n.mcmc) # fit model post-burn-in
#Trace Plot for Betas and Sigma
beta.post.mat=cbind(m.samples$beta[1,,1],m.samples$beta[2,,1])
mu.beta.post.mat=m.samples$mu.beta[1,,1]
sig.post.mat=cbind(m.samples$`taubeta.matrix[1,1]`[1,,1],m.samples$`taubeta.matrix[2,2]`[1,,1]) #Need to do 1/taubetamatrix
matplot(beta.post.mat,type="l",lty=1,ylab=bquote(beta))
matplot(sig.post.mat,type="l",lty=1,ylab=bquote(sigma^2))
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(mu))
dist.labels=as.factor(rep(as.character(1:n),each=n.mcmc))
slopes.mat=as.matrix(m.samples[[1]][2,,1])
slopes.df=data.frame(x=c(slopes.mat),y=dist.labels)
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(1:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
X <- oxboys$age
X.list=vector("list",n)
for(i in 1:n){
X.list[[i]]=matrix(1,J,2)
X.list[[i]][,2]=X[oxboys$Subject==i]
}
X.list
#Setup Data
y <- oxboys$height
#Setup Data
y <- matrix(1,n,J)
for (i in 1:n){
y[i,] <- oxboys[which(oxboys$Subject==i),]$height
}
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X.ist[[i]]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
n.mcmc=100000
n.burn=round(.2*n.mcmc)
#Set Priors
mu_u=rep(0,2)
I.matrix = diag(J)
taubeta.matrix = matrix(0,2,2)
tau_u=1/1000*diag(2) #Precision. 1 / sigma^2
a  = 1
b  = 3
a0 = 1
b0 = 3
a1 = 1
b1 = 3
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X.list[[i]]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
X.list
X.list[[1]]
ox.jags <-"
model{
for(i in 1:n){
y[,i] ~ dmnorm(X.list[[i]]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
y
rvmnorm(1,1,1)
rmvnorm(1,1,1)
rmvn(1,1,1)
rmvn(1,mu_u,tau_u)
X.list[[1]]%*%rmvn(1,mu_u,tau_u)
t(X.list[[1]])%*%rmvn(1,mu_u,tau_u)
X.list[[1]]%*%t(rmvn(1,mu_u,tau_u))
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X.list[[i]]%*%t(beta),tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
X.list
X.list[1]
X.list[1][1]
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X.list[i]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
#Attempt with X.List
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X.list[[i]]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
m.out<-jags.model(mod,data=list('y'=y, 'X.list'=X.list, 'n'=n, 'I.matrix'=I.matrix,'mu_u'=mu_u,'tau_u'=tau_u,'a'=a,'b'=b,'a0'=a0,'b0'=b0,'a1'=a1,'b1'=b1),n.chains=3,n.adapt=0)
for (i in 1:n){
X[i,] <- oxboys[which(oxboys$Subject == i),]$age
}
X <- matrix(1,n,J)
for (i in 1:n){
X[i,] <- oxboys[which(oxboys$Subject == i),]$age
}
X <- cbind(1,t(X))
#Without X.List
ox.jags <-"
model{
for(i in 1:n){
y[i,] ~ dmnorm(X[,c(1,i+1)]%*%beta,tau*I.matrix)
}
tau ~ dgamma(a,b)
beta ~ dmnorm(mu.beta, taubeta.matrix)
mu.beta ~ dmnorm(mu_u, tau_u)
tau0 ~ dgamma(a0,b0)
taubeta.matrix[1,1] <- tau0
tau1 ~ dgamma(a1,b1)
taubeta.matrix[2,2] <- tau1
taubeta.matrix[1,2] <- 0
taubeta.matrix[2,1] <- 0
}
"
mod<-textConnection(ox.jags)
slopes.mat_mu=as.matrix(m.samples$mu.beta[1,,1])
slopes.df=data.frame(x=c(slopes.mat_mu),y=dist.labels)
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(1:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
m.samples$mu.beta[2,,1]
mu.beta.post.mat=cbind(m.samples$mu.beta[1,,1],m.samples$mu.beta[2,,1])
matplot(mu.beta.post.mat,type="l",lty=1,ylab=bquote(mu))
slopes.mat_mu=as.matrix(m.samples$mu.beta[2,,1])
ggplot(slopes.df, aes(x=x,y=fct_reorder(dist.labels,rep(1:n,each=n.mcmc))))+geom_density_ridges(rel_min_height = 0.005)+labs(y="posterior density",x="parameter value",title="Slope Coefficients")+geom_vline(xintercept=0,size=1,linetype="dashed",col=rgb(0,0,0,.5))
