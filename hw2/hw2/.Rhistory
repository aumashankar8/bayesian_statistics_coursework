mutate(sdDifficulty = sd(as.numeric(Difficulty))) %>%
select(avgScore,sdScore,avgPrior,sdPrior,avgEnjoyment,sdEnjoyment,avgInterest,sdInterest,avgEffort,sdEffort,avgDifficulty,sdDifficulty) %>%
arrange(factor(Condition, levels = c("NoNoteTaking","RegularNoteTaking","InterpolatedNoteTaking"
))) %>%
distinct()
#One Way Anovas
testNotesBehaved <- testNotes %>% filter(BehaviorCheck == "No")
priorKnowledgeAOV <- aov(as.numeric(PriorKnowledge) ~ Condition, data = testNotesBehaved)
summary(priorKnowledgeAOV)
eta_squared(priorKnowledgeAOV)
enjoymentAOV <- aov(as.numeric(Enjoyment) ~ Condition, data = testNotesBehaved)
summary(enjoymentAOV)
eta_squared(enjoymentAOV)
interestAOV <- aov(as.numeric(Interest) ~ Condition, data = testNotesBehaved)
summary(interestAOV)
eta_squared(interestAOV)
effortAOV <- aov(as.numeric(Effort) ~ Condition, data = testNotesBehaved)
summary(effortAOV)
eta_squared(effortAOV)
difficultyAOV <- aov(as.numeric(Difficulty) ~ Condition, data = testNotesBehaved)
summary(difficultyAOV)
eta_squared(difficultyAOV)
##Descriptives of Pre and Post JOL and Scores)
testNotes %>% group_by(Condition) %>% filter(BehaviorCheck == "No") %>%
mutate(avgPreJOL = mean(as.numeric(`pre-JOL`))) %>%
mutate(sdPreJOL = sd(as.numeric(`pre-JOL`))) %>%
mutate(avgPreJOLDelay = mean(as.numeric(`pre-JOL_retention`))) %>%
mutate(sdPreJOLDelay = sd(as.numeric(`pre-JOL_retention`))) %>%
mutate(avgPostConf = mean(as.numeric(`post-confidence`))) %>%
mutate(sdPostConf = sd(as.numeric(`post-confidence`))) %>%
mutate(avgScore = mean(as.numeric(FinalScore))) %>%
mutate(sdScore = sd(as.numeric(FinalScore))) %>%
select(avgPreJOL,sdPreJOL,avgPreJOLDelay,sdPreJOLDelay,avgPostConf,sdPostConf,avgScore,sdScore) %>%
arrange(factor(Condition, levels = c("NoNoteTaking","RegularNoteTaking","InterpolatedNoteTaking"
))) %>%
distinct()
#One Way Anovas
preJOLAOV <-  aov(as.numeric(testNotesBehaved$'pre-JOL') ~ Condition, data = testNotesBehaved)
summary(preJOLAOV)
eta_squared(preJOLAOV)
preJOLDelayAOV <- aov(as.numeric(testNotesBehaved$'pre-JOL_retention') ~ Condition, data = testNotesBehaved)
summary(preJOLDelayAOV)
eta_squared(preJOLDelayAOV)
postConfAOV <- aov(as.numeric(testNotesBehaved$'post-confidence') ~ Condition, data = testNotesBehaved)
summary(postConfAOV)
eta_squared(postConfAOV)
finalScoreAOV <- aov(as.numeric(FinalScore) ~ Condition, data = testNotesBehaved)
summary(finalScoreAOV)
eta_squared(finalScoreAOV)
###___________________WORD COUNT___________________###
## Add the wordCounts to the Big one
setwd("~/UT Austin/Research/Interpolated Note-Taking/Data")
wordCount <- read_csv("Interpolated Note-taking_April 21, 2022_11.58_WC2.csv")
wordCount <- wordCount %>% select(ResponseId,WC_Regular,WC_Interpolated_1,WC_Interpolated_2,WC_Interpolated_3,WC_Interpolated_4,WC_Interpolated_5,WC_Interpolated_Total)
testNotesWC <- left_join(testNotes,wordCount,by = "ResponseId")
testNotesWC <- testNotesWC %>% mutate(wordCount = WC_Regular + WC_Interpolated_Total)
testNotesWC %>% select(Condition, wordCount) %>% arrange(Condition)
regNotesWC <- as.numeric(unlist(testNotesWC[testNotesWC$Condition=="RegularNoteTaking","wordCount"]))
#CHECK WHY SOME ARE NA AND SOME ARE 0
mean(regNotesWC,na.rm = TRUE) # 83.85
median(regNotesWC,na.rm = TRUE) # 79
range(regNotesWC[regNotesWC != 0],na.rm = TRUE) #[2 282] 280
sum(regNotesWC == 0) #Number of people who wrote NOTHING in Regular Note Taking Group = 13
intNotesWC <- as.numeric(unlist(testNotesWC[testNotesWC$Condition=="InterpolatedNoteTaking","wordCount"]))
mean(intNotesWC,na.rm = TRUE) #136.31
median(intNotesWC,na.rm = TRUE) #139
range(intNotesWC,na.rm = TRUE) #[5 344] 339
sum(intNotesWC == 0) #Number of people who wrote NOTHING in Interpolated Note Taking Group = 0
#testNotesWC %>% group_by(Condition) %>% cor(testNotesWC$wordCount,as.numeric(testNotesWC$FinalScore))
testNotesWC %>% group_by(Condition) %>% ggplot(aes(x = wordCount, y = as.numeric(FinalScore),shape = Condition, color = Condition)) + geom_point() + geom_smooth(method = "lm",se = FALSE)
#Word Count Graphs
testNotesWC %>% filter(Condition == "InterpolatedNoteTaking" | Condition == "RegularNoteTaking") %>% filter(BehaviorCheck == "No") %>% ggplot(aes(x = wordCount, y = as.numeric(FinalScore),shape = Condition, color = Condition)) + geom_point() + geom_smooth(method = "lm",se = FALSE)
model111 <- lm(FinalScore ~ wordCount*Condition,data = testNotesWC)
summary(model111)
anova(model111)
#Subset WITHOUT No-Note Taking
wordCountSubset <- testNotesWC %>% filter(Condition == "InterpolatedNoteTaking" | Condition == "RegularNoteTaking") %>% filter(BehaviorCheck == "No") %>% mutate(wordCountZ = as.numeric(scale(wordCount)))
length(wordCountSubset$ResponseId)
##RUN ANOVAS FOR EACH NOTE TAKING CONDITIONS
modelWORD <- lm(FinalScore ~ wordCountZ*Condition,data = wordCountSubset)
summary(modelWORD)
regNotesAOV <- aov(FinalScore ~ wordCountZ*Condition, data = wordCountSubset)
summary(regNotesAOV)
eta_squared(regNotesAOV)
#r <- by(testNotesWC, testNotesWC$Condition, FUN = function(X) cor(X$wordCount,as.numeric(X$FinalScore),method = "spearman" ))
## Relating Word Count to Parts
part1_total <- 3
part2_total <- 1
part3_total <- 4
part4_total <- 3
part5_total <- 4
#Create a percentage Score for each of the parts
testNotesWC <- testNotesWC %>% mutate(part1Percent = as.numeric(Part1Score)/part1_total) %>%
mutate(part2Percent = as.numeric(Part2Score)/part2_total) %>%
mutate(part3Percent = as.numeric(Part3Score)/part3_total) %>%
mutate(part4Percent = as.numeric(Part4Score)/part4_total) %>%
mutate(part5Percent = as.numeric(Part5Score)/part5_total)
#Just the Interpolated Condition
testNotesWCSubset <- testNotesWC %>% filter(Condition == "InterpolatedNoteTaking") %>% filter(BehaviorCheck == "No")
#Linear Regressions predicting the percentage correct on each part based on the word count
part1Mod <- lm(part1Percent ~ WC_Interpolated_1,data = testNotesWCSubset)
summary(part1Mod) # t = 1.270, p = 0.208
part2Mod <- lm(part2Percent ~ WC_Interpolated_2,data = testNotesWCSubset)
summary(part2Mod) # t = 0.575, p = 0.567
part3Mod <- lm(part3Percent ~ WC_Interpolated_3,data = testNotesWCSubset)
summary(part3Mod) # t = 0.026, p = 0.980
part4Mod <- lm(part4Percent ~ WC_Interpolated_4,data = testNotesWCSubset)
summary(part4Mod) # t = 2.051, p < .05*
part5Mod <- lm(part5Percent ~ WC_Interpolated_5,data = testNotesWCSubset)
summary(part5Mod) # t = 3.043, p < .01**
testNotesWCSubset %>% mutate(Part1Mean = mean(WC_Interpolated_1), Part2Mean = mean(WC_Interpolated_2), Part3Mean = mean(WC_Interpolated_3), Part4Mean = mean(WC_Interpolated_4), Part5Mean = mean(WC_Interpolated_5)) %>% select(Part1Mean,Part2Mean,Part3Mean, Part4Mean, Part5Mean) %>% distinct
testNotesWCSubset %>% mutate(Part1SD = sd(WC_Interpolated_1), Part2SD = sd(WC_Interpolated_2), Part3SD = sd(WC_Interpolated_3), Part4SD = sd(WC_Interpolated_4), Part5SD = sd(WC_Interpolated_5)) %>% select(Part1SD,Part2SD,Part3SD, Part4SD, Part5SD) %>% distinct
testNotesWCSubset %>% mutate(Part1SD = sd(WC_Interpolated_1), Part2SD = sd(WC_Interpolated_2), Part3SD = sd(WC_Interpolated_3), Part4SD = sd(WC_Interpolated_4), Part5SD = sd(WC_Interpolated_5)) %>% select(Part1SD,Part2SD,Part3SD, Part4SD, Part5SD) %>% distinct
View(testNotesWCSubset)
testNotesWCSubsetuh <- testNotesWCSubset %>% select(FinalScore,Part1Score,Part2Score,Part3Score,Part4Score,Part5Score) %>%
mutate_if(is.character,as.numeric)
View(testNotesWCSubsetuh)
describe(testNotesWCSubsetuh$FinalScore)
describe(testNotesWCSubsetuh[c(128:132,135:139,140)])
describe(testNotesSubsetuh)
describe(testNotesWCSubsetuh)
9.23/15
2.13/3
0.71/1
2.04/4
1.90/3
2.45/4
testNotesWCSubsetWord <- testNotesWCSubset %>% select(WC_Interpolated_1,WC_Interpolated_2,WC_Interpolated_3,WC_Interpolated_4,WC_Interpolated_5) %>%
mutate_if(is.character,as.numeric)
describe(testNotesWCSubsetWord)
9.23/15
describe(testNotesWCSubsetuh)
9.23/15
2.13/3
0.71/1
2.04/4
1.90/3
2.45/4
describe(testNotesWCSubsetuh)
1.01/4
part5Mod <- lm(part5Percent ~ WC_Interpolated_5,data = testNotesWCSubset)
summary(part5Mod) # t = 3.043, p < .01**
names(testNotesWCSubset)
cor(testNotesWCSubset[3:8],testNotesWCSubset[128:133])
cor(as.numeric(testNotesWCSubset[3:8]),as.numeric(testNotesWCSubset[128:133])
cor(as.numeric(testNotesWCSubset[3:8]),as.numeric(testNotesWCSubset[128:133]))
cor(as.numeric(testNotesWCSubset[3:8]),as.numeric(testNotesWCSubset[128:133]))
#cleanup Columns and remove test rows
testNotes <- intNoteData %>% select(-StartDate,-EndDate,-Status,-IPAddress,-Progress,-`Duration (in seconds)`,-RecordedDate,-RecipientLastName,-RecipientFirstName,-RecipientEmail,-ExternalReference,-LocationLatitude,-LocationLongitude,-DistributionChannel,-UserLanguage) %>%
relocate(Finished, .after = ResponseId) %>%
filter(!row_number() %in% c(3:10)) %>%
filter(Finished == "True") %>% # gets rid of anybody that did not finish #CHECK EXPORT TO SEE IF IT'S CAPITAL TRUE OR NOT
relocate(c(SC0:SC5),.after = ResponseId) %>%
rename(Condition = FL_17_DO) %>% relocate(Condition,.after = ResponseId) %>%
relocate(c(age:ethnicity),.after = SC5) %>%
relocate(c(PriorKnowledge:NoteUse_6),.after=SC5) %>%
relocate(c("post-confidence":BehaviorCheck),.after = NoteUse_6) %>%
relocate(c("Year in college",majorClassification,"English Fluency",Multilingualism),.after = ethnicity) %>%
rename(FinalScore = SC0) %>%
rename(Part1Score = SC1) %>%
rename(Part2Score = SC2) %>%
rename(Part3Score = SC3) %>%
rename(Part4Score = SC4) %>%
rename(Part5Score = SC5) %>%
mutate_if(is.character,as.numeric)
testNotes
View(testNotes)
#cleanup Columns and remove test rows
testNotes <- intNoteData %>% select(-StartDate,-EndDate,-Status,-IPAddress,-Progress,-`Duration (in seconds)`,-RecordedDate,-RecipientLastName,-RecipientFirstName,-RecipientEmail,-ExternalReference,-LocationLatitude,-LocationLongitude,-DistributionChannel,-UserLanguage) %>%
relocate(Finished, .after = ResponseId) %>%
filter(!row_number() %in% c(3:10)) %>%
filter(Finished == "True") %>% # gets rid of anybody that did not finish #CHECK EXPORT TO SEE IF IT'S CAPITAL TRUE OR NOT
relocate(c(SC0:SC5),.after = ResponseId) %>%
rename(Condition = FL_17_DO) %>% relocate(Condition,.after = ResponseId) %>%
relocate(c(age:ethnicity),.after = SC5) %>%
relocate(c(PriorKnowledge:NoteUse_6),.after=SC5) %>%
relocate(c("post-confidence":BehaviorCheck),.after = NoteUse_6) %>%
relocate(c("Year in college",majorClassification,"English Fluency",Multilingualism),.after = ethnicity) %>%
rename(FinalScore = SC0) %>%
rename(Part1Score = SC1) %>%
rename(Part2Score = SC2) %>%
rename(Part3Score = SC3) %>%
rename(Part4Score = SC4) %>%
rename(Part5Score = SC5) %>%
intNoteData %>% filter(!row_number() %in% c(1:10)) %>% select(Finished,FL_17_DO) %>% table() #See how many are Finished vs. Not
#cleanup Columns and remove test rows
testNotes <- intNoteData %>% select(-StartDate,-EndDate,-Status,-IPAddress,-Progress,-`Duration (in seconds)`,-RecordedDate,-RecipientLastName,-RecipientFirstName,-RecipientEmail,-ExternalReference,-LocationLatitude,-LocationLongitude,-DistributionChannel,-UserLanguage) %>%
relocate(Finished, .after = ResponseId) %>%
filter(!row_number() %in% c(3:10)) %>%
filter(Finished == "True") %>% # gets rid of anybody that did not finish #CHECK EXPORT TO SEE IF IT'S CAPITAL TRUE OR NOT
relocate(c(SC0:SC5),.after = ResponseId) %>%
rename(Condition = FL_17_DO) %>% relocate(Condition,.after = ResponseId) %>%
relocate(c(age:ethnicity),.after = SC5) %>%
relocate(c(PriorKnowledge:NoteUse_6),.after=SC5) %>%
relocate(c("post-confidence":BehaviorCheck),.after = NoteUse_6) %>%
relocate(c("Year in college",majorClassification,"English Fluency",Multilingualism),.after = ethnicity) %>%
rename(FinalScore = SC0) %>%
rename(Part1Score = SC1) %>%
rename(Part2Score = SC2) %>%
rename(Part3Score = SC3) %>%
rename(Part4Score = SC4) %>%
rename(Part5Score = SC5)
testNotesWCSubsetCorrelation <- testNotesWCSubset %>% select(FinalScore,Part1Score,Part2Score,Part3Score,Part4Score,Part5Score,WC_Interpolated_1,WC_Interpolated_2,WC_Interpolated_3,WC_Interpolated_4,WC_Interpolated_5,WC_Interpolated_Total) %>%
mutate_if(is.character,as.numeric)
cor(testNotesWCSubsetCorrelation)
cor(testNotesWCSubsetCorrelation)
cor(testNotesWCSubsetCorrelation)
testNotesWCSubsetCorrelation
cor.test(testNotesWCSubsetCorrelation$Part1Score,testNotesWCSubsetCorrelation$WC_Interpolated_1)
cor.test(testNotesWCSubsetCorrelation$Part2Score,testNotesWCSubsetCorrelation$WC_Interpolated_2)
cor.test(testNotesWCSubsetCorrelation$Part3Score,testNotesWCSubsetCorrelation$WC_Interpolated_3)
cor.test(testNotesWCSubsetCorrelation$FinalScore,testNotesWCSubsetCorrelation$WC_Interpolated_Total)
cor.test(testNotesWCSubsetCorrelation$Part1Score,testNotesWCSubsetCorrelation$WC_Interpolated_1)
cor.test(testNotesWCSubsetCorrelation$Part2Score,testNotesWCSubsetCorrelation$WC_Interpolated_2)
cor.test(testNotesWCSubsetCorrelation$Part3Score,testNotesWCSubsetCorrelation$WC_Interpolated_3)
cor.test(testNotesWCSubsetCorrelation$Part4Score,testNotesWCSubsetCorrelation$WC_Interpolated_4)
cor.test(testNotesWCSubsetCorrelation$Part5Score,testNotesWCSubsetCorrelation$WC_Interpolated_5)
cor.test(testNotesWCSubsetCorrelation$FinalScore,testNotesWCSubsetCorrelation$WC_Interpolated_Total)
describe(testNotesWCSubsetCorrelation)
9.23/15
2.13/3
0.71/1
2.04/4
1.90/3
table(testNotes$GenPref)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(psych)
library(plyr)
library(dplyr)
library(ggplot2)
library(sjPlot)
library(lme4)
library(lmerTest)
library(corrplot)
library(lavaan)
library(GPArotation)
library(tidyr)
library(effectsize)
library(emmeans)
library(stringr)
setwd("~/UT Austin/Research/Interpolated Note-Taking/Data")
intNoteData <-  read_csv("Interpolated Note-taking_April 21, 2022_11.58.csv")
#View(intNoteData)
#cleanup Columns and remove test rows
testNotes <- intNoteData %>% select(-StartDate,-EndDate,-Status,-IPAddress,-Progress,-`Duration (in seconds)`,-RecordedDate,-RecipientLastName,-RecipientFirstName,-RecipientEmail,-ExternalReference,-LocationLatitude,-LocationLongitude,-DistributionChannel,-UserLanguage) %>%
relocate(Finished, .after = ResponseId) %>%
filter(!row_number() %in% c(3:10)) %>%
filter(Finished == "True") %>% # gets rid of anybody that did not finish #CHECK EXPORT TO SEE IF IT'S CAPITAL TRUE OR NOT
relocate(c(SC0:SC5),.after = ResponseId) %>%
rename(Condition = FL_17_DO) %>% relocate(Condition,.after = ResponseId) %>%
relocate(c(age:ethnicity),.after = SC5) %>%
relocate(c(PriorKnowledge:NoteUse_6),.after=SC5) %>%
relocate(c("post-confidence":BehaviorCheck),.after = NoteUse_6) %>%
relocate(c("Year in college",majorClassification,"English Fluency",Multilingualism),.after = ethnicity) %>%
rename(FinalScore = SC0) %>%
rename(Part1Score = SC1) %>%
rename(Part2Score = SC2) %>%
rename(Part3Score = SC3) %>%
rename(Part4Score = SC4) %>%
rename(Part5Score = SC5) %>%
mutate(FinalScore = as.numeric(FinalScore)) %>%
mutate(Part1Score = as.numeric(Part1Score)) %>%
mutate(Part2Score = as.numeric(Part2Score)) %>%
mutate(Part3Score = as.numeric(Part3Score)) %>%
mutate(Part4Score = as.numeric(Part4Score)) %>%
mutate(Part5Score = as.numeric(Part5Score))
intNoteData %>% filter(!row_number() %in% c(1:10)) %>% select(Finished,FL_17_DO) %>% table() #See how many are Finished vs. Not
testNotes  %>% select(Finished,Condition) %>% table() #Compare with our cleaned data
setwd("~/UT Austin/Research/Interpolated Note-Taking/Data")
setwd("~/UT Austin/Research/Interpolated Note-Taking/Data")
intNoteData <-  read_csv("Interpolated Note-taking_April 21, 2022_11.58.csv")
#View(intNoteData)
#cleanup Columns and remove test rows
testNotes <- intNoteData %>% select(-StartDate,-EndDate,-Status,-IPAddress,-Progress,-`Duration (in seconds)`,-RecordedDate,-RecipientLastName,-RecipientFirstName,-RecipientEmail,-ExternalReference,-LocationLatitude,-LocationLongitude,-DistributionChannel,-UserLanguage) %>%
relocate(Finished, .after = ResponseId) %>%
filter(!row_number() %in% c(3:10)) %>%
filter(Finished == "True") %>% # gets rid of anybody that did not finish #CHECK EXPORT TO SEE IF IT'S CAPITAL TRUE OR NOT
relocate(c(SC0:SC5),.after = ResponseId) %>%
rename(Condition = FL_17_DO) %>% relocate(Condition,.after = ResponseId) %>%
relocate(c(age:ethnicity),.after = SC5) %>%
relocate(c(PriorKnowledge:NoteUse_6),.after=SC5) %>%
relocate(c("post-confidence":BehaviorCheck),.after = NoteUse_6) %>%
relocate(c("Year in college",majorClassification,"English Fluency",Multilingualism),.after = ethnicity) %>%
rename(FinalScore = SC0) %>%
rename(Part1Score = SC1) %>%
rename(Part2Score = SC2) %>%
rename(Part3Score = SC3) %>%
rename(Part4Score = SC4) %>%
rename(Part5Score = SC5) %>%
mutate(FinalScore = as.numeric(FinalScore)) %>%
mutate(Part1Score = as.numeric(Part1Score)) %>%
mutate(Part2Score = as.numeric(Part2Score)) %>%
mutate(Part3Score = as.numeric(Part3Score)) %>%
mutate(Part4Score = as.numeric(Part4Score)) %>%
mutate(Part5Score = as.numeric(Part5Score))
intNoteData %>% filter(!row_number() %in% c(1:10)) %>% select(Finished,FL_17_DO) %>% table() #See how many are Finished vs. Not
testNotes  %>% select(Finished,Condition) %>% table() #Compare with our cleaned data
testNotes[testNotes == "Not at all1"] <- "1"
testNotes[testNotes == "A lot6"] <- "6"
testNotes[testNotes == "None1"] <- "1"
testNotes[testNotes =="Very difficult6"] <- "6"
testNotes[testNotes =="A lot of effort 6"] <- "6"
#Recode the Descriptives
for(i in 18:23){
testNotes[,i]=ifelse(testNotes[,i]== "1Never", 1,
ifelse(testNotes[,i]== "2Rarely", 2,
ifelse(testNotes[,i]== "3Sometimes", 3,
ifelse(testNotes[,i] == "4Often", 4,
ifelse(testNotes[,i] == "5Very frequently", 5,
ifelse(testNotes[,i] == "6Always/almost always", 6,NaN))))))
}
#Recode Prior Knowledge
for(i in 9){
testNotes[,i]=ifelse(testNotes[,i]== "Not at all", 1,
ifelse(testNotes[,i]== "Mostly unfamiliar", 2,
ifelse(testNotes[,i]== "Somewhat unfamiliar", 3,
ifelse(testNotes[,i] == "Somewhat familiar", 4,
ifelse(testNotes[,i] == "Mostly familiar", 5,
ifelse(testNotes[,i] == "Very familiar", 6,NaN))))))
}
#Turn all the Character Columns to Numeric
testNotes <- testNotes %>%
mutate(Enjoyment = as.numeric(Enjoyment)) %>%
mutate(Interest = as.numeric(Interest)) %>%
mutate(Effort = as.numeric(Effort)) %>%
mutate(Difficulty = as.numeric(Difficulty)) %>%
mutate(`pre-JOL` = as.numeric(`pre-JOL`)) %>%
mutate(`pre-JOL_retention` = as.numeric(`pre-JOL_retention`)) %>%
mutate(`post-confidence` = as.numeric(`post-confidence`)) %>%
mutate(age = as.numeric(age)) %>%
mutate(PredictedMeans_1 = as.numeric(PredictedMeans_1)) %>%
mutate(PredictedMeans_2 = as.numeric(PredictedMeans_2)) %>%
mutate(PredictedMeans_3 = as.numeric(PredictedMeans_3)) %>%
mutate(effectiveness_1 = as.numeric(effectiveness_1)) %>%
mutate(effectiveness_2 = as.numeric(effectiveness_2)) %>%
mutate(effectiveness_3 = as.numeric(effectiveness_3))
#Descriptives of Mean and SD for each Group
aggregate(lapply(testNotes[9:13],as.numeric), list(testNotes$Condition),mean, na.rm=TRUE)
aggregate(lapply(testNotes[9:13],as.numeric), list(testNotes$Condition),sd, na.rm=TRUE)
# Descriptives:
length(which(testNotes$Condition == "NoNoteTaking")) #86
length(which(testNotes$Condition == "RegularNoteTaking")) #80
length(which(testNotes$Condition == "InterpolatedNoteTaking")) #86
# Demographics
aggregate(lapply(testNotes[32:34],as.numeric), list(testNotes$Condition),mean, na.rm=TRUE)
table(testNotes$age)
table(testNotes$sex)
table(testNotes$GenPref)
table(testNotes$ethnicity)
table(testNotes$`Year in college`)
table(testNotes$majorClassification)
table(testNotes$`English Fluency`)
table(testNotes$Multilingualism)
table(testNotes$BehaviorCheck)
#Table based on Condition for Mean and SD of Final Score, Prior Knowledge, Enjoyment, Interest, Effort, and Difficulty
testNotes %>% group_by(Condition) %>% filter(BehaviorCheck == "No") %>%
mutate(avgScore = mean(FinalScore)) %>%
mutate(sdScore = sd(FinalScore)) %>%
mutate(avgPrior = mean(PriorKnowledge)) %>%
mutate(sdPrior = sd(PriorKnowledge)) %>%
mutate(avgEnjoyment = mean(Enjoyment)) %>%
mutate(sdEnjoyment = sd(Enjoyment)) %>%
mutate(avgInterest = mean(Interest)) %>%
mutate(sdInterest = sd(Interest)) %>%
mutate(avgEffort = mean(Effort)) %>%
mutate(sdEffort = sd(Effort)) %>%
mutate(avgDifficulty = mean(Difficulty)) %>%
mutate(sdDifficulty = sd(Difficulty)) %>%
select(avgScore,sdScore,avgPrior,sdPrior,avgEnjoyment,sdEnjoyment,avgInterest,sdInterest,avgEffort,sdEffort,avgDifficulty,sdDifficulty) %>%
arrange(factor(Condition, levels = c("NoNoteTaking","RegularNoteTaking","InterpolatedNoteTaking"
))) %>%
distinct()
#One Way Anovas
testNotesBehaved <- testNotes %>% filter(BehaviorCheck == "No")
priorKnowledgeAOV <- aov(PriorKnowledge ~ Condition, data = testNotesBehaved)
summary(priorKnowledgeAOV)
eta_squared(priorKnowledgeAOV)
enjoymentAOV <- aov(Enjoyment ~ Condition, data = testNotesBehaved)
summary(enjoymentAOV)
eta_squared(enjoymentAOV)
interestAOV <- aov(Interest ~ Condition, data = testNotesBehaved)
summary(interestAOV)
eta_squared(interestAOV)
effortAOV <- aov(Effort ~ Condition, data = testNotesBehaved)
summary(effortAOV)
eta_squared(effortAOV)
difficultyAOV <- aov(Difficulty ~ Condition, data = testNotesBehaved)
summary(difficultyAOV)
eta_squared(difficultyAOV)
##Descriptives of Pre and Post JOL and Scores)
testNotes %>% group_by(Condition) %>% filter(BehaviorCheck == "No") %>%
mutate(avgPreJOL = mean(`pre-JOL`)) %>%
mutate(sdPreJOL = sd(`pre-JOL`)) %>%
mutate(avgPreJOLDelay = mean(`pre-JOL_retention`)) %>%
mutate(sdPreJOLDelay = sd(`pre-JOL_retention`)) %>%
mutate(avgPostConf = mean(`post-confidence`)) %>%
mutate(sdPostConf = sd(`post-confidence`)) %>%
mutate(avgScore = mean(FinalScore)) %>%
mutate(sdScore = sd(FinalScore)) %>%
select(avgPreJOL,sdPreJOL,avgPreJOLDelay,sdPreJOLDelay,avgPostConf,sdPostConf,avgScore,sdScore) %>%
arrange(factor(Condition, levels = c("NoNoteTaking","RegularNoteTaking","InterpolatedNoteTaking"
))) %>%
distinct()
#One Way Anovas
preJOLAOV <-  aov(testNotesBehaved$'pre-JOL' ~ Condition, data = testNotesBehaved)
summary(preJOLAOV)
eta_squared(preJOLAOV)
preJOLDelayAOV <- aov(testNotesBehaved$'pre-JOL_retention' ~ Condition, data = testNotesBehaved)
summary(preJOLDelayAOV)
eta_squared(preJOLDelayAOV)
postConfAOV <- aov(testNotesBehaved$'post-confidence' ~ Condition, data = testNotesBehaved)
summary(postConfAOV)
eta_squared(postConfAOV)
finalScoreAOV <- aov(FinalScore ~ Condition, data = testNotesBehaved)
summary(finalScoreAOV)
eta_squared(finalScoreAOV)
#Read in the 2 datasets
setwd("~/UT Austin/Research/Interpolated Note-Taking/ALD Surveys")
finalGrades <- read_csv("FinalGradesCSV.csv")
beginningSurvey <- read_csv("BeginningSurvey.csv")
finalGrades <- finalGrades %>% mutate(Percentage = as.numeric(gsub("%$","",finalGrades$Percentage))) %>% rename(id = ID)
#Merge the datasets together by id and rename the columns
aldSurvey <- left_join(beginningSurvey,finalGrades, by = "id")
aldSurveySubset <- aldSurvey %>% select(id,`28202139: In general, how will you most likely take notes for this class?`,
`28202140: Which of the following best describes the way you tend to take notes?`,
`28202143: How do you use your notes? Check all that apply.`,
`28202144: If you feel like the last couple of questions did not fully capture (a) how you tend to take notes, and (b) how you use your notes, please provide more detail in the space below.`,Percentage) %>%
rename(noteTakingStrat = `28202139: In general, how will you most likely take notes for this class?`,
bestDescription = `28202140: Which of the following best describes the way you tend to take notes?`,
useNotes = `28202143: How do you use your notes? Check all that apply.`,
extraDetail = `28202144: If you feel like the last couple of questions did not fully capture (a) how you tend to take notes, and (b) how you use your notes, please provide more detail in the space below.`)
#Convert awkward N/A's to true NA
aldSurveySubset[aldSurveySubset == "n/a"] <- NA
aldSurveySubset[aldSurveySubset == "N/A"] <- NA
aldSurveySubset[aldSurveySubset == "N/a"] <- NA
#Recode the Categorical Entries?
table(aldSurveySubset$noteTakingStrat)
table(aldSurveySubset$bestDescription)
table(aldSurveySubset$useNotes) #Qualitiative
table(aldSurveySubset$extraDetail) #Qualitative
a <- aldSurveySubset %>% group_by(noteTakingStrat) %>%
summarise(cnt = n()) %>%
mutate(freq = cnt / sum(cnt)) %>%
rename(Strategy = noteTakingStrat)
b <- aldSurveySubset %>% group_by(bestDescription) %>%
summarise(cnt = n()) %>%
mutate(freq = cnt / sum(cnt)) %>%
rename(Strategy = bestDescription)
aldDescriptives <-rbind(a,b)
aldDescriptives <-rbind(a,b)
aldDescriptives
aldDescriptives
a
knitr::opts_chunk$set(echo = TRUE)
aldDescriptives
aldDescriptives
install.packages(LKT)
install.packages("LKT")
library(LKT)
# set working directory
setwd("~/UT Austin/Spring 2023/Bayesian Stats/hw2/hw2")
# source MCMC for Gibbs sampling
source("mcmc_randomWalk.R")
# read auto data
library(readr)
auto <- read_csv("auto.csv")
# Setup y and hyperparameters
y <- auto$mpg
mu0 <- mean(y)
sigma20 <- var(y)
# Hyper parameter for log(sigma)
mu_log <- 0
sig_log <- 2.25
# MCMC (Gibbs) for Normal-Normal-Normal(Log)
mcmc.out <- mcmc.randomWalk(y, mu0, sigma20, mu_log, sig_log, sigma2.start = 25, sig.tune = 1, n.mcmc = 1000000)
# MCMC (Gibbs) for Normal-Normal-Normal(Log)
mcmc.out <- mcmc.randomWalk(y, mu0, sigma20, mu_log, sig_log, sigma2.start = 25, sig.tune = 1, n.mcmc = 50000)
# trace plot
plot(mcmc.out$mu.save, type='l', xlab='k', ylab=bquote(mu),
main =bquote("Trace Plot for " ~ mu ))
plot(mcmc.out$log_sigma.save, type='l', xlab='k', ylab=bquote(log(sigma)),
main =bquote("Trace Plot for " ~ log(sigma)))
#Design Matrices
n <- length(y)
L <- 3
X.list=vector("list",L)
X.list[[1]]=model.matrix(mpg ~ cylinders + model.year, data = auto)
X.list[[2]]=model.matrix(mpg ~ cylinders , data = auto)
X.list[[3]]=model.matrix(mpg ~ model.year, data = auto)
source("regressionDIC.R")
beta.mean.list <- vector("list",L)
beta.var.list  <- vector("list",L)
#list of means and vars for Betas
for(l in 1:L){
beta.mean.list[[l]]=rep(0,dim(X.list[[l]])[2])
beta.var.list[[l]]=1000
}
mcmc.out.list=vector("list",L)
DIC.vec=rep(0,L)
for(l in 1:L){
mcmc.out.list[[l]] <- norm.DIC(y, X.list[[l]], mcmc.out$sigma2.save, beta.mean.list[[l]], beta.var.list[[l]],50000)
DIC.vec[l]=mcmc.out.list[[l]]$DIC
}
auto$mpg
mean(auto$mpg)
#Model 1: 2641.365  #BEST B0: -16.6998405  B1=-3.0051047   B2=0.7448058
#Model 2: 3031.059
#Model 3: 3980.787
plot(1:L,DIC.vec,type="o",lwd=2,ylab="DIC",xlab="Model")
auto$cylinders
auto$model.year
